namespace lsst { namespace pipe { namespace tasks {
/**
\page pipeTasks_writeCmdLineTask How to Write a Command-Line Task

The exciting sequel to \ref pipeTasks_writeTask.

\section pipeTasks_writeCmdLineTask_contents Contents

- \ref pipeTasks_writeCmdLineTask_overview
    - \ref pipeTasks_writeCmdLineTask_differences
- \ref pipeTasks_writeCmdLineTask_runScript
- \ref pipeTasks_writeCmdLineTask_readWriteData
    - \ref pipeTasks_writeCmdLineTask_addDatasetTypes
- \ref pipeTasks_writeCmdLineTask_persistingConfigAndMetadata
    - \ref pipeTasks_writeCmdLineTask_customzeConfigDatasetType
    - \ref pipeTasks_writeCmdLineTask_preventSavingConfig
- \ref pipeTasks_writeCmdLineTask_customArgumentParser
- \ref pipeTasks_writeCmdLineTask_customTaskRunner

\section pipeTasks_writeCmdLineTask_overview Overview

This document describes how to write a command-line task, which is the LSST version of a complete
data processing pipeline. To create a command-line task you will benefit from some background:
- Read the \ref pipeBase_introduction "pipe_base documentation" to get a basic idea of what tasks are
    and what classes are used to implement them.
- Read \ref pipeTasks_writeTask. A command-line task is an enhanced version of a regular task.
    Thus all the considerations for writing a normal task also apply to writing a command-line task,
    and these will not be repeated in this manual.
- Acquire a basic understanding of data repositories and how to use the butler to read and write data
    (to be written; for now read existing tasks to see how it is done).

\subsection pipeTasks_writeCmdLineTask_differences Types of Tasks

A command-line task is an enhanced version of a regular task (see \ref pipeTasks_writeTask).
Regular tasks are only intended to be used as relatively self-contained stages in data processing pipelines,
whereas command-line tasks can also be used as complete pipelines. As such,
command-line tasks include \ref pipeTasks_writeCmdLineTask_runScript that run them as pipelines.

Command-line tasks have the following key attributes, in addition to the attributes for regular tasks:

- They are subclasses of \ref lsst.pipe.base.cmdLineTask.CmdLineTask "lsst.pipe.base.CmdLineTask",
    whereas ordinary tasks are subclasses of \ref lsst.pipe.base.task.Task "lsst.pipe.base.Task".
- They have an associated \ref pipeTasks_writeCmdLineTask_runScript "run script" to run them from the
    command-line as pipelines.
- \anchor pipeTasks_writeCmdLineTask_runMethod They have a `run` method which performs the full pipeline
    data processing.
- By default the `run` method takes exactly one argument: a data reference for the item of data to be
    processed. Variations are possible, but require that you provide a
    \ref pipeTasks_writeCmdLineTask_customArgumentParser and often a
    \ref pipeTasks_writeCmdLineTask_customTaskRunner.
- When run from the command line, most command-line tasks save the configuration used and the metadata
    generated. See pipeTasks_writeCmdLineTask_persistingConfigAndMetadata for more information.
- \anchor pipeTasks_writeCmdLineTask_taskRunner They have one additional
    \ref pipeTasks_writeTask_classVariables "class variable": `TaskRunner', which specifies a "task runner"
    for the task. The task runner takes a parsed command and runs the task. The default task runner
    will work for any script whose `run` method accepts a single data reference, such as
    \ref exampleCmdLineTask.ExampleCmdLineTask "ExampleCmdLineTask".
    If your task's `run` method needs something else then you will have to provide a
    \ref pipeTasks_writeCmdLineTask_customTaskRunner "custom task runner".

\section pipeTasks_writeCmdLineTask_runScript Run Script

A command-line task can be run as a pipeline via run script. This is usually a trivial script
which merely calls the task's `parseAndRun` method. `parseAndRun` does the following:
- Parses the command line, which includes determining the 
    \ref pipeTasks_writeTask_configuration "configuration" for the task and which data items to process.
- Constructs the task.
- Calls the task's `run` method once for each data item to process.

The runner script for \ref exampleCmdLineTask.ExampleCmdLineTask "ExampleCmdLineTask" is
`examples/exampleCmdLineTask.py`:
\dontinclude exampleCmdLineTask.py
\skip from lsst.pipe
\until parseAndRun

For mosts command-line tasks you should put the run script into your package's `bin/` directory,
so that it is on your `$PATH` when you setup your package with eups. We did not want the run script
for ExampleCmdLineTask to be quite so accessible, so we placed it in the `examples/` directory
instead of `bin/`.

Don't forget to and your run script executable using `chmod +x`.

\section pipeTasks_writeCmdLineTask_readWriteData Reading and Writing Data

The \ref pipeTasks_writeCmdLineTask_runMethod "run method" typically receives a single data reference, as
mentioned above. It read and writes data using this data reference (or the underlying butler, if necessary).

\subsection pipeTasks_writeCmdLineTask_addDatasetTypes Adding Dataset Types

Every time you write a task that writes a new kind of data (a new "dataset type") you must tell the
butler about it. Similarly, if you write a new task for which you want to save configuration and metadata
(which is the case for most tasks that process data), you have to tell the butler about it.

To add a dataset, edit the mapper configuration file for each obs_ package on whose data
the task can be run. If the task is of general interest (wanted for most or all obs_ packages)
then this process of updating all the mapper configuration files can be time consuming.

There are plans to change how mappers are configured. But as of this writing,
mapper configuration files are contained in the policy directory of the obs_ package.
For instance the configuration for the lsstSim mapper is defined in
obs_lsstSim/policy/LsstSimMapper.paf.

\section pipeTasks_writeCmdLineTask_persistingConfigAndMetadata Persisting Config and Metadata

Normally when you run a task you want the configuration for the task and the metadata generated by the task
to be saved to the data repository. By default, this is done automatically, using dataset types:
- <i>_DefaultName</i>`_config` for the configuration
- <i>_DefaultName</i>`_metadata` for the metadata

where <i>_DefaultName</i> is the value of the task's `_DefaultName`
\ref pipeTasks_writeTask_classVariables "class variable".

Whether you use these default dataset types or
\ref pipeTasks_writeCmdLineTask_customzeConfigDatasetType "customize the dataset types", you will have to
\ref pipeTasks_writeCmdLineTask_addDatasetTypes "add dataset types" for the configuration and metadata.

\subsection pipeTasks_writeCmdLineTask_customzeConfigDatasetType Customizing Config and Metadata Dataset Types

Occasionally the default dataset types for configuration and metadata are not sufficient. For instance
in the case of the \ref pipe.tasks.makeSkyMap.MakeSkyMapTask "pipe.tasks.MakeSkyMapTask"
and various co-addition tasks, the co-add type must be part of the config and metadata dataset type name.
To customize the dataset type of a task's config or metadata, define task methods `_getConfigName` and
`_getMetadataName` to return the desired names.

\subsection pipeTasks_writeCmdLineTask_preventSavingConfig Prevent Saving Config and Metadata

For some tasks you may wish to not save config and metadata at all. This is appropriate for tasks that
simply report information without saving data. To disable saving configuration and metadata, define task
methods `_getConfigName` and `_getMetadataName` methods to return `None`.

\section pipeTasks_writeCmdLineTask_customArgumentParser Custom Argument Parser

The default argument parser returned by `CmdLineTask._makeArgumentParser` assumes that your task's
\ref pipeTasks_writeCmdLineTask_runMethod "run method" processes raw or calibrated images. If this is not
the case you can easily provide a modified argument parser by overriding the `_makeArgumentParser` method.

Here are some examples:
- A task's `run` methd requires a data reference of some kind other than a raw or calibrated image.
    This is a common case, and easily solved. For example the processCoadd.ProcessCoaddTask
    processes co-adds, which are specified by \ref skyMap_introduction "sky map patch".
    `ProcessCoaddTask._makeArgumentParser` is very simple:
    \dontinclude processCoadd.py
    \skipline classmethod
    \skip def _makeArgumentParser
    \until return
- A task's `run` method requires more than one kind of data reference. An example is co-addition,
    which requires the user to specify the co-add as a \ref skyMap_introduction "sky map patch",
    and optionally allows the user to specify a list of exposures to co-add.
    `CoaddBaseTask._makeArgumentParser` is a straightforward example of specifying two data IDs arguments:
    one for the sky map patch, and an optional ID argument for which exposures to co-add:
    \dontinclude coaddBase.py
    \skipline classmethod
    \skip def _makeArgumentParser
    \until return
- A task's `run` method requires no data references at all. An example is makeSkyMap.MakeSkyMapTask,
    which makes a \ref skyMap_introduction "sky map" for a set of co-adds.
    makeSkyMap.MakeSkyMapTask._makeArgumentParser is trivial:
    \dontinclude makeSkyMap.py
    \skipline classmethod
    \skip def _makeArgumentParser
    \until return

Note that if your task requires a custom argument parser to do more than just change the
type of the single data reference, then it also require a \ref pipeTasks_writeCmdLineTask_customTaskRunner
"custom task runner", as well.

\section pipeTasks_writeCmdLineTask_customTaskRunner Custom Task Runner

The standard \ref pipeTasks_writeCmdLineTask_taskRunner "task runner" is 
\ref lsst.pipe.base.cmdLineTask.TaskRunner "lsst.pipe.base.TaskRunner".
It assumes that your task's `run` method wants a single data reference and nothing else. If that is not
the case then you will have to provide a custom task runner for your task. This involves writing a subclass of
\ref lsst.pipe.base.cmdLineTask.TaskRunner "lsst.pipe.base.TaskRunner" and specifying it in your task
using the `TaskRunner` \ref pipeTasks_writeTask_classVariables" class variable".

Here are some situations where a custom task runner is required:
- The task's `run` method requires extra arguments. An example is co-addition, which optionally accepts
    a list of images to co-add. The custom task runner is coaddBase.CoaddTaskRunner and is pleasantly simple:
    \dontinclude coaddBase.py
    \skip class CoaddTaskRunner
    \until end CoaddTaskRunner
- The task requires no data references, just a butler. An example is makeSkyMap.MakeSkyMapTask,
    which makes a skymap.SkyMap for a set of co-adds. It uses the custom task runner
    makeSkyMap.MakeSkyMapRunner, which is more complicated than the previous example
    because the entire `__call__` method must be overridden:
    \dontinclude makeSkyMap.py
    \skip class MakeSkyMapRunner
    \until end MakeSkyMapRunner

*/
}}} // namespace lsst::pipe::tasks